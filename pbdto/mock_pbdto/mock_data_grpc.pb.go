// Code generated by MockGen. DO NOT EDIT.
// Source: ./data_grpc.pb.go

// Package mock_pbdto is a generated GoMock package.
package mock_pbdto

import (
	context "context"
	reflect "reflect"

	pbdto "github.com/aybjax/nis_lib/pbdto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGetStudentCoursesClient is a mock of GetStudentCoursesClient interface.
type MockGetStudentCoursesClient struct {
	ctrl     *gomock.Controller
	recorder *MockGetStudentCoursesClientMockRecorder
}

// MockGetStudentCoursesClientMockRecorder is the mock recorder for MockGetStudentCoursesClient.
type MockGetStudentCoursesClientMockRecorder struct {
	mock *MockGetStudentCoursesClient
}

// NewMockGetStudentCoursesClient creates a new mock instance.
func NewMockGetStudentCoursesClient(ctrl *gomock.Controller) *MockGetStudentCoursesClient {
	mock := &MockGetStudentCoursesClient{ctrl: ctrl}
	mock.recorder = &MockGetStudentCoursesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetStudentCoursesClient) EXPECT() *MockGetStudentCoursesClientMockRecorder {
	return m.recorder
}

// GetCourses mocks base method.
func (m *MockGetStudentCoursesClient) GetCourses(ctx context.Context, in *pbdto.Request, opts ...grpc.CallOption) (*pbdto.CoursesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCourses", varargs...)
	ret0, _ := ret[0].(*pbdto.CoursesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourses indicates an expected call of GetCourses.
func (mr *MockGetStudentCoursesClientMockRecorder) GetCourses(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourses", reflect.TypeOf((*MockGetStudentCoursesClient)(nil).GetCourses), varargs...)
}

// MockGetStudentCoursesServer is a mock of GetStudentCoursesServer interface.
type MockGetStudentCoursesServer struct {
	ctrl     *gomock.Controller
	recorder *MockGetStudentCoursesServerMockRecorder
}

// MockGetStudentCoursesServerMockRecorder is the mock recorder for MockGetStudentCoursesServer.
type MockGetStudentCoursesServerMockRecorder struct {
	mock *MockGetStudentCoursesServer
}

// NewMockGetStudentCoursesServer creates a new mock instance.
func NewMockGetStudentCoursesServer(ctrl *gomock.Controller) *MockGetStudentCoursesServer {
	mock := &MockGetStudentCoursesServer{ctrl: ctrl}
	mock.recorder = &MockGetStudentCoursesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetStudentCoursesServer) EXPECT() *MockGetStudentCoursesServerMockRecorder {
	return m.recorder
}

// GetCourses mocks base method.
func (m *MockGetStudentCoursesServer) GetCourses(arg0 context.Context, arg1 *pbdto.Request) (*pbdto.CoursesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourses", arg0, arg1)
	ret0, _ := ret[0].(*pbdto.CoursesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourses indicates an expected call of GetCourses.
func (mr *MockGetStudentCoursesServerMockRecorder) GetCourses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourses", reflect.TypeOf((*MockGetStudentCoursesServer)(nil).GetCourses), arg0, arg1)
}

// MockUnsafeGetStudentCoursesServer is a mock of UnsafeGetStudentCoursesServer interface.
type MockUnsafeGetStudentCoursesServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGetStudentCoursesServerMockRecorder
}

// MockUnsafeGetStudentCoursesServerMockRecorder is the mock recorder for MockUnsafeGetStudentCoursesServer.
type MockUnsafeGetStudentCoursesServerMockRecorder struct {
	mock *MockUnsafeGetStudentCoursesServer
}

// NewMockUnsafeGetStudentCoursesServer creates a new mock instance.
func NewMockUnsafeGetStudentCoursesServer(ctrl *gomock.Controller) *MockUnsafeGetStudentCoursesServer {
	mock := &MockUnsafeGetStudentCoursesServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGetStudentCoursesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGetStudentCoursesServer) EXPECT() *MockUnsafeGetStudentCoursesServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGetStudentCoursesServer mocks base method.
func (m *MockUnsafeGetStudentCoursesServer) mustEmbedUnimplementedGetStudentCoursesServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGetStudentCoursesServer")
}

// mustEmbedUnimplementedGetStudentCoursesServer indicates an expected call of mustEmbedUnimplementedGetStudentCoursesServer.
func (mr *MockUnsafeGetStudentCoursesServerMockRecorder) mustEmbedUnimplementedGetStudentCoursesServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGetStudentCoursesServer", reflect.TypeOf((*MockUnsafeGetStudentCoursesServer)(nil).mustEmbedUnimplementedGetStudentCoursesServer))
}

// MockGetCourseStudentsClient is a mock of GetCourseStudentsClient interface.
type MockGetCourseStudentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGetCourseStudentsClientMockRecorder
}

// MockGetCourseStudentsClientMockRecorder is the mock recorder for MockGetCourseStudentsClient.
type MockGetCourseStudentsClientMockRecorder struct {
	mock *MockGetCourseStudentsClient
}

// NewMockGetCourseStudentsClient creates a new mock instance.
func NewMockGetCourseStudentsClient(ctrl *gomock.Controller) *MockGetCourseStudentsClient {
	mock := &MockGetCourseStudentsClient{ctrl: ctrl}
	mock.recorder = &MockGetCourseStudentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCourseStudentsClient) EXPECT() *MockGetCourseStudentsClientMockRecorder {
	return m.recorder
}

// GetStudents mocks base method.
func (m *MockGetCourseStudentsClient) GetStudents(ctx context.Context, in *pbdto.Request, opts ...grpc.CallOption) (*pbdto.StudentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudents", varargs...)
	ret0, _ := ret[0].(*pbdto.StudentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudents indicates an expected call of GetStudents.
func (mr *MockGetCourseStudentsClientMockRecorder) GetStudents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudents", reflect.TypeOf((*MockGetCourseStudentsClient)(nil).GetStudents), varargs...)
}

// MockGetCourseStudentsServer is a mock of GetCourseStudentsServer interface.
type MockGetCourseStudentsServer struct {
	ctrl     *gomock.Controller
	recorder *MockGetCourseStudentsServerMockRecorder
}

// MockGetCourseStudentsServerMockRecorder is the mock recorder for MockGetCourseStudentsServer.
type MockGetCourseStudentsServerMockRecorder struct {
	mock *MockGetCourseStudentsServer
}

// NewMockGetCourseStudentsServer creates a new mock instance.
func NewMockGetCourseStudentsServer(ctrl *gomock.Controller) *MockGetCourseStudentsServer {
	mock := &MockGetCourseStudentsServer{ctrl: ctrl}
	mock.recorder = &MockGetCourseStudentsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCourseStudentsServer) EXPECT() *MockGetCourseStudentsServerMockRecorder {
	return m.recorder
}

// GetStudents mocks base method.
func (m *MockGetCourseStudentsServer) GetStudents(arg0 context.Context, arg1 *pbdto.Request) (*pbdto.StudentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudents", arg0, arg1)
	ret0, _ := ret[0].(*pbdto.StudentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudents indicates an expected call of GetStudents.
func (mr *MockGetCourseStudentsServerMockRecorder) GetStudents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudents", reflect.TypeOf((*MockGetCourseStudentsServer)(nil).GetStudents), arg0, arg1)
}

// MockUnsafeGetCourseStudentsServer is a mock of UnsafeGetCourseStudentsServer interface.
type MockUnsafeGetCourseStudentsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGetCourseStudentsServerMockRecorder
}

// MockUnsafeGetCourseStudentsServerMockRecorder is the mock recorder for MockUnsafeGetCourseStudentsServer.
type MockUnsafeGetCourseStudentsServerMockRecorder struct {
	mock *MockUnsafeGetCourseStudentsServer
}

// NewMockUnsafeGetCourseStudentsServer creates a new mock instance.
func NewMockUnsafeGetCourseStudentsServer(ctrl *gomock.Controller) *MockUnsafeGetCourseStudentsServer {
	mock := &MockUnsafeGetCourseStudentsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGetCourseStudentsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGetCourseStudentsServer) EXPECT() *MockUnsafeGetCourseStudentsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGetCourseStudentsServer mocks base method.
func (m *MockUnsafeGetCourseStudentsServer) mustEmbedUnimplementedGetCourseStudentsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGetCourseStudentsServer")
}

// mustEmbedUnimplementedGetCourseStudentsServer indicates an expected call of mustEmbedUnimplementedGetCourseStudentsServer.
func (mr *MockUnsafeGetCourseStudentsServerMockRecorder) mustEmbedUnimplementedGetCourseStudentsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGetCourseStudentsServer", reflect.TypeOf((*MockUnsafeGetCourseStudentsServer)(nil).mustEmbedUnimplementedGetCourseStudentsServer))
}
