// Code generated by MockGen. DO NOT EDIT.
// Source: ./queue.go

// Package mock_cmntypes is a generated GoMock package.
package mock_cmntypes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAppQueue is a mock of AppQueue interface.
type MockAppQueue struct {
	ctrl     *gomock.Controller
	recorder *MockAppQueueMockRecorder
}

// MockAppQueueMockRecorder is the mock recorder for MockAppQueue.
type MockAppQueueMockRecorder struct {
	mock *MockAppQueue
}

// NewMockAppQueue creates a new mock instance.
func NewMockAppQueue(ctrl *gomock.Controller) *MockAppQueue {
	mock := &MockAppQueue{ctrl: ctrl}
	mock.recorder = &MockAppQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppQueue) EXPECT() *MockAppQueueMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockAppQueue) Publish(data []byte, queue, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", data, queue, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockAppQueueMockRecorder) Publish(data, queue, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAppQueue)(nil).Publish), data, queue, topic)
}

// Subscribe mocks base method.
func (m *MockAppQueue) Subscribe(queue, topic string, cb func([]byte) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", queue, topic, cb)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockAppQueueMockRecorder) Subscribe(queue, topic, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockAppQueue)(nil).Subscribe), queue, topic, cb)
}
